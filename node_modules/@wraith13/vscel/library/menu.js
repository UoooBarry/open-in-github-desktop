"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.showInputBox = exports.showQuickPick = void 0;
const vscode = require("vscode");
const base = require("./base");
exports.showQuickPick = (items, options, token) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    const vscodeOptions = base.simplyDeepCopy(options !== null && options !== void 0 ? options : {});
    vscodeOptions.rollback = undefined;
    vscodeOptions.strictRollback = undefined;
    vscodeOptions.debug = undefined;
    vscodeOptions.preview = undefined;
    vscodeOptions.command = undefined;
    vscodeOptions.onCancel = undefined;
    let lastPreview = (_a = options === null || options === void 0 ? void 0 : options.strictRollback) !== null && _a !== void 0 ? _a : options === null || options === void 0 ? void 0 : options.rollback;
    const apply = (method) => __awaiter(void 0, void 0, void 0, function* () {
        if (method && lastPreview !== method) {
            lastPreview = method;
            if (options === null || options === void 0 ? void 0 : options.debug) {
                yield method();
            }
            else {
                try {
                    yield method();
                }
                catch (_c) {
                    //  適用のキャンセルにより、大量の `rejected promise not handled` でログを汚すことになってしまうので握り潰す。
                    //  握り潰す代わりになにかログを吐いてしまうと結局同じ事だし・・・
                    //  尚、ここでエラーになったからと言って、 return false しちゃうのはロジック的にダメ
                }
            }
            return true;
        }
        return false;
    });
    const solidItems = yield items;
    const result = yield vscode.window.showQuickPick(solidItems
        .filter(i => undefined === i.when || i.when(solidItems)), Object.assign({
        onDidSelectItem: (item) => __awaiter(void 0, void 0, void 0, function* () {
            var _d, _e;
            if ((_d = options === null || options === void 0 ? void 0 : options.preview) !== null && _d !== void 0 ? _d : true) {
                yield apply(options === null || options === void 0 ? void 0 : options.strictRollback);
                // tslint:disable-next-line: no-unused-expression
                (yield apply(item === null || item === void 0 ? void 0 : item.preview)) || (yield apply(options === null || options === void 0 ? void 0 : options.rollback));
            }
            return (_e = options === null || options === void 0 ? void 0 : options.onDidSelectItem) === null || _e === void 0 ? void 0 : _e.call(options, item);
        })
    }, vscodeOptions), token);
    yield apply(options === null || options === void 0 ? void 0 : options.strictRollback);
    if (result) {
        // tslint:disable-next-line: no-unused-expression
        (yield apply(result.command)) || (yield apply(result.preview));
        if (options === null || options === void 0 ? void 0 : options.command) {
            yield (options === null || options === void 0 ? void 0 : options.command(result));
        }
    }
    else {
        if ((_b = options === null || options === void 0 ? void 0 : options.preview) !== null && _b !== void 0 ? _b : true) {
            yield apply(options === null || options === void 0 ? void 0 : options.rollback);
        }
        if (options === null || options === void 0 ? void 0 : options.onCancel) {
            yield (options === null || options === void 0 ? void 0 : options.onCancel());
        }
    }
    return result;
});
exports.showInputBox = (options, token) => __awaiter(void 0, void 0, void 0, function* () {
    var _f;
    const preview = (_f = options === null || options === void 0 ? void 0 : options.preview) !== null && _f !== void 0 ? _f : true;
    const command = options === null || options === void 0 ? void 0 : options.command;
    const rollback = options === null || options === void 0 ? void 0 : options.rollback;
    const onCancel = options === null || options === void 0 ? void 0 : options.onCancel;
    const vscodeOptions = base.simplyDeepCopy(options !== null && options !== void 0 ? options : {});
    vscodeOptions.preview = undefined;
    vscodeOptions.command = undefined;
    vscodeOptions.rollback = undefined;
    vscodeOptions.onCancel = undefined;
    if (preview) {
        vscodeOptions.validateInput = (input) => __awaiter(void 0, void 0, void 0, function* () {
            var _g;
            const result = (_g = options === null || options === void 0 ? void 0 : options.validateInput) === null || _g === void 0 ? void 0 : _g.call(options, input);
            if (undefined === result || null === result) {
                if (preview) {
                    yield (command === null || command === void 0 ? void 0 : command(input));
                }
            }
            else {
                yield (rollback === null || rollback === void 0 ? void 0 : rollback());
            }
            return result;
        });
    }
    const result = yield vscode.window.showInputBox(vscodeOptions, token);
    if (undefined !== result) {
        yield (command === null || command === void 0 ? void 0 : command(result));
    }
    else {
        yield (rollback === null || rollback === void 0 ? void 0 : rollback());
        yield (onCancel === null || onCancel === void 0 ? void 0 : onCancel());
    }
    return result;
});
//# sourceMappingURL=menu.js.map