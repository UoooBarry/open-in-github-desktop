"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeRoot = exports.Root = exports.stringArrayValidator = exports.makeEnumValidator = exports.MapEntry = exports.Entry = exports.Scope = void 0;
const vscode = require("vscode");
const sectionKeyRegExp = /^(.+)\.([^.]+)$/;
;
exports.Scope = Object.freeze({
    defaultScope: "default-scope",
    user: "user",
    rootWorkspace: "root-workspace",
    activeWorkspace: "active-workspace",
    activeTextEditor: "active-text-editor",
});
class Entry {
    constructor(data) {
        this.data = data;
        this.regulate = (rawKey, value) => {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            if (undefined === value) {
                return (_a = this.data.properties) === null || _a === void 0 ? void 0 : _a.default;
            }
            else if (this.data.validator && !this.data.validator(value)) {
                // settings.json をテキストとして直接編集してる時はともかく GUI での編集時に無駄にエラー表示が行われてしまうので、エンドユーザーに対するエラー表示は行わない。
                //vscode.window.showErrorMessage(`${rawKey} setting value is invalid! Please check your settings.`);
                console.error(`"${rawKey}" setting value(${JSON.stringify(value)}) is invalid! Please check your settings.`);
                return (_b = this.data.properties) === null || _b === void 0 ? void 0 : _b.default;
            }
            else {
                if (undefined !== ((_c = this.data.properties) === null || _c === void 0 ? void 0 : _c.minimum) && value < ((_d = this.data.properties) === null || _d === void 0 ? void 0 : _d.minimum)) {
                    return (_e = this.data.properties) === null || _e === void 0 ? void 0 : _e.minimum;
                }
                else if (undefined !== ((_f = this.data.properties) === null || _f === void 0 ? void 0 : _f.maximum) && ((_g = this.data.properties) === null || _g === void 0 ? void 0 : _g.maximum) < value) {
                    return (_h = this.data.properties) === null || _h === void 0 ? void 0 : _h.maximum;
                }
            }
            return value;
        };
        this.getBase = (scope) => vscode.workspace.getConfiguration(this.data.key.replace(sectionKeyRegExp, "$1"), this.getScope(scope));
        this.getBaseByLanguageId = (languageId, scope) => vscode.workspace.getConfiguration(`[${languageId}]`, this.getScope(scope));
        this.getScope = (scope) => {
            var _a, _b;
            switch (scope) {
                case "default-scope":
                    return this.getScope(this.data.defaultScope);
                case "user":
                    return null;
                case "root-workspace":
                    return (_a = vscode.workspace.workspaceFolders) === null || _a === void 0 ? void 0 : _a[0];
                case "active-workspace":
                    return vscode.window.activeTextEditor ?
                        vscode.workspace.getWorkspaceFolder(vscode.window.activeTextEditor.document.uri) :
                        this.getScope("root-workspace");
                case "active-text-editor":
                    return (_b = vscode.window.activeTextEditor) === null || _b === void 0 ? void 0 : _b.document;
                default:
                    return scope;
            }
        };
        this.get = (scope) => this.regulate(this.data.key, this.getBase(scope).get(this.data.key.replace(sectionKeyRegExp, "$2")));
        this.getByLanguageId = (languageId, scope) => {
            const languageValue = this.getBaseByLanguageId(languageId, scope).get(this.data.key);
            if (undefined !== languageValue) {
                return this.regulate(`[${languageId}].${this.data.key}`, languageValue);
            }
            else {
                return this.get(scope);
            }
        };
        this.inspect = (scope) => this.getBase(scope).inspect(this.data.key.replace(sectionKeyRegExp, "$2"));
        this.inspectByActiveTextEditor = () => { var _a; return this.inspect((_a = vscode.window.activeTextEditor) === null || _a === void 0 ? void 0 : _a.document); };
        this.set = (value, scope, configurationTarget, overrideInLanguage) => __awaiter(this, void 0, void 0, function* () {
            const name = this.data.key.replace(sectionKeyRegExp, "$2");
            const config = this.getBase(scope);
            if (undefined !== configurationTarget) {
                yield config.update(name, value, configurationTarget, overrideInLanguage);
            }
            else {
                const inspectResult = config.inspect(name);
                if (undefined !== (inspectResult === null || inspectResult === void 0 ? void 0 : inspectResult.workspaceFolderLanguageValue)) {
                    yield config.update(name, value, vscode.ConfigurationTarget.WorkspaceFolder, true);
                }
                else if (undefined !== (inspectResult === null || inspectResult === void 0 ? void 0 : inspectResult.workspaceLanguageValue)) {
                    yield config.update(name, value, vscode.ConfigurationTarget.Workspace, true);
                }
                else if (undefined !== (inspectResult === null || inspectResult === void 0 ? void 0 : inspectResult.globalLanguageValue) || true === overrideInLanguage) {
                    yield config.update(name, value, vscode.ConfigurationTarget.Global, true);
                }
                if (undefined !== (inspectResult === null || inspectResult === void 0 ? void 0 : inspectResult.workspaceFolderValue)) {
                    yield config.update(name, value, vscode.ConfigurationTarget.WorkspaceFolder, false);
                }
                else if (undefined !== (inspectResult === null || inspectResult === void 0 ? void 0 : inspectResult.workspaceValue)) {
                    yield config.update(name, value, vscode.ConfigurationTarget.Workspace, false);
                }
                else 
                //if (undefined !== inspectResult?.globalValue)
                {
                    yield config.update(name, value, vscode.ConfigurationTarget.Global, false);
                }
            }
        });
        this.setByActiveTextEditor = (value, configurationTarget, overrideInLanguage) => __awaiter(this, void 0, void 0, function* () { var _a; return yield this.set(value, (_a = vscode.window.activeTextEditor) === null || _a === void 0 ? void 0 : _a.document, configurationTarget, overrideInLanguage); });
        this.setByLanguageId = (languageId, value, scope, configurationTarget) => __awaiter(this, void 0, void 0, function* () {
            const config = this.getBaseByLanguageId(languageId, scope);
            if (undefined !== configurationTarget) {
                yield config.update(this.data.key, value, configurationTarget);
            }
            else {
                const inspectResult = config.inspect(this.data.key);
                // if (undefined !== inspectResult?.workspaceFolderLanguageValue)
                // {
                //     await config.update(this.data.key, value, vscode.ConfigurationTarget.WorkspaceFolder, true);
                // }
                // else
                // if (undefined !== inspectResult?.workspaceLanguageValue)
                // {
                //     await config.update(this.data.key, value, vscode.ConfigurationTarget.Workspace, true);
                // }
                // else
                // if (undefined !== inspectResult?.globalLanguageValue)
                // {
                //     await config.update(this.data.key, value, vscode.ConfigurationTarget.Global, true);
                // }
                if (undefined !== (inspectResult === null || inspectResult === void 0 ? void 0 : inspectResult.workspaceFolderValue)) {
                    yield config.update(this.data.key, value, vscode.ConfigurationTarget.WorkspaceFolder, false);
                }
                else if (undefined !== (inspectResult === null || inspectResult === void 0 ? void 0 : inspectResult.workspaceValue)) {
                    yield config.update(this.data.key, value, vscode.ConfigurationTarget.Workspace, false);
                }
                else 
                //if (undefined !== inspectResult?.globalValue)
                {
                    yield config.update(this.data.key, value, vscode.ConfigurationTarget.Global, false);
                }
            }
        });
    }
}
exports.Entry = Entry;
class MapEntry {
    constructor(data) {
        this.data = data;
        this.config = new Entry({
            key: this.data.key,
            properties: this.data.properties,
            validator: exports.makeEnumValidator(this.data.mapObject),
            defaultScope: this.data.defaultScope,
        });
        this.getKey = (scope) => this.config.get(scope);
        this.getKeyByLanguageId = (languageId, scope) => this.config.getByLanguageId(languageId, scope);
        this.get = (scope) => this.data.mapObject[this.getKey(scope)];
        this.getByLanguageId = (languageId, scope) => this.data.mapObject[this.getKeyByLanguageId(languageId, scope)];
        this.inspectKey = (scope) => this.config.inspect(scope);
        this.inspectKeyByActiveTextEditor = () => this.config.inspectByActiveTextEditor();
        this.setKey = (key, scope, configurationTarget, overrideInLanguage) => __awaiter(this, void 0, void 0, function* () { return yield this.config.set(key, scope, configurationTarget, overrideInLanguage); });
        this.setKeyByActiveTextEditor = (key, configurationTarget, overrideInLanguage) => __awaiter(this, void 0, void 0, function* () { return yield this.config.setByActiveTextEditor(key, configurationTarget, overrideInLanguage); });
        this.setByLanguageId = (languageId, key, scope, configurationTarget) => __awaiter(this, void 0, void 0, function* () { return yield this.config.setByLanguageId(languageId, key, scope, configurationTarget); });
    }
}
exports.MapEntry = MapEntry;
exports.makeEnumValidator = (mapObject) => (value) => 0 <= Object.keys(mapObject).indexOf(value.toString());
exports.stringArrayValidator = (value) => "[object Array]" === Object.prototype.toString.call(value) &&
    value.map(i => "string" === typeof i).reduce((a, b) => a && b, true);
class Root {
    constructor(properties) {
        this.properties = properties;
        this.makeEntry = (key, defaultScope, validator) => this.register(new Entry({ key, validator, properties: this.properties[key], defaultScope, }));
        this.makeMapEntry = (key, defaultScope, mapObject) => this.register(new MapEntry({ key, mapObject, properties: this.properties[key], defaultScope, }));
        this.entries = [];
        this.register = (entry) => {
            this.entries.push(entry);
            return entry;
        };
    }
}
exports.Root = Root;
exports.makeRoot = (packageJson) => new Root(packageJson.contributes.configuration[0].properties);
//# sourceMappingURL=config.js.map