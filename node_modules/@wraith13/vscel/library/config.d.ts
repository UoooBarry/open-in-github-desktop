import * as vscode from 'vscode';
declare type PropertiesEntry<valueT> = {
    default?: valueT;
    minimum?: valueT;
    maximum?: valueT;
    scope?: string;
};
declare type PropertiesBaseType = {
    [key: string]: PropertiesEntry<any>;
};
interface PackageJson<PropertiesT extends PropertiesBaseType> {
    contributes: PackageJsonContributes<PropertiesT>;
}
interface PackageJsonContributes<PropertiesT extends PropertiesBaseType> {
    configuration: PackageJsonConfiguration<PropertiesT>[];
}
interface PackageJsonConfiguration<PropertiesT extends PropertiesBaseType> {
    properties: PropertiesT;
}
export interface InspectResultType<valueT> {
    key: string;
    defaultValue?: valueT;
    globalValue?: valueT;
    workspaceValue?: valueT;
    workspaceFolderValue?: valueT;
    defaultLanguageValue?: valueT;
    globalLanguageValue?: valueT;
    workspaceLanguageValue?: valueT;
    workspaceFolderLanguageValue?: valueT;
    languageIds?: string[];
}
export declare type DefaultScope = "user" | "root-workspace" | "active-workspace" | "active-text-editor";
export declare type ScopeSource = vscode.ConfigurationScope | null | undefined | "default-scope" | DefaultScope;
export declare const Scope: Readonly<{
    defaultScope: ScopeSource;
    user: DefaultScope;
    rootWorkspace: DefaultScope;
    activeWorkspace: DefaultScope;
    activeTextEditor: DefaultScope;
}>;
export declare class Entry<valueT> {
    data: {
        key: string;
        properties?: PropertiesEntry<valueT>;
        validator?: (value: valueT) => boolean;
        defaultScope?: DefaultScope;
    };
    constructor(data: {
        key: string;
        properties?: PropertiesEntry<valueT>;
        validator?: (value: valueT) => boolean;
        defaultScope?: DefaultScope;
    });
    regulate: (rawKey: string, value: valueT | undefined) => valueT;
    getBase: (scope?: ScopeSource) => vscode.WorkspaceConfiguration;
    getBaseByLanguageId: (languageId: string, scope?: ScopeSource) => vscode.WorkspaceConfiguration;
    getScope: (scope: ScopeSource) => vscode.ConfigurationScope | null | undefined;
    get: (scope?: ScopeSource) => valueT;
    getByLanguageId: (languageId: string, scope?: ScopeSource) => valueT;
    inspect: (scope?: ScopeSource) => InspectResultType<valueT>;
    inspectByActiveTextEditor: () => InspectResultType<valueT>;
    set: (value: valueT | undefined, scope?: ScopeSource, configurationTarget?: vscode.ConfigurationTarget | undefined, overrideInLanguage?: boolean | undefined) => Promise<void>;
    setByActiveTextEditor: (value: valueT | undefined, configurationTarget?: vscode.ConfigurationTarget | undefined, overrideInLanguage?: boolean | undefined) => Promise<void>;
    setByLanguageId: (languageId: string, value: valueT | undefined, scope?: ScopeSource, configurationTarget?: vscode.ConfigurationTarget | undefined) => Promise<void>;
}
export declare class MapEntry<ObjectT> {
    data: {
        key: string;
        mapObject: ObjectT;
        properties?: PropertiesEntry<keyof ObjectT>;
        defaultScope?: DefaultScope;
    };
    constructor(data: {
        key: string;
        mapObject: ObjectT;
        properties?: PropertiesEntry<keyof ObjectT>;
        defaultScope?: DefaultScope;
    });
    config: Entry<keyof ObjectT>;
    getKey: (scope?: ScopeSource) => keyof ObjectT;
    getKeyByLanguageId: (languageId: string, scope?: ScopeSource) => keyof ObjectT;
    get: (scope?: ScopeSource) => ObjectT[keyof ObjectT];
    getByLanguageId: (languageId: string, scope?: ScopeSource) => ObjectT[keyof ObjectT];
    inspectKey: (scope?: ScopeSource) => InspectResultType<keyof ObjectT>;
    inspectKeyByActiveTextEditor: () => InspectResultType<keyof ObjectT>;
    setKey: (key: keyof ObjectT | undefined, scope?: ScopeSource, configurationTarget?: vscode.ConfigurationTarget | undefined, overrideInLanguage?: boolean | undefined) => Promise<void>;
    setKeyByActiveTextEditor: (key: keyof ObjectT | undefined, configurationTarget?: vscode.ConfigurationTarget | undefined, overrideInLanguage?: boolean | undefined) => Promise<void>;
    setByLanguageId: (languageId: string, key: keyof ObjectT | undefined, scope?: ScopeSource, configurationTarget?: vscode.ConfigurationTarget | undefined) => Promise<void>;
}
export declare const makeEnumValidator: <ObjectT>(mapObject: ObjectT) => (value: keyof ObjectT) => boolean;
export declare const stringArrayValidator: (value: string[]) => boolean;
export declare type IEntry<valueT> = Entry<valueT> | MapEntry<valueT>;
export declare class Root<PropertiesT extends PropertiesBaseType> {
    properties: PropertiesT;
    constructor(properties: PropertiesT);
    makeEntry: <valueT>(key: keyof PropertiesT & string, defaultScope: DefaultScope, validator?: ((value: valueT) => boolean) | undefined) => Entry<valueT>;
    makeMapEntry: <ObjectT>(key: keyof PropertiesT & string, defaultScope: DefaultScope, mapObject: ObjectT) => MapEntry<ObjectT>;
    entries: IEntry<unknown>[];
    private register;
}
export declare const makeRoot: <PropertiesT extends PropertiesBaseType>(packageJson: PackageJson<PropertiesT>) => Root<PropertiesT>;
export {};
